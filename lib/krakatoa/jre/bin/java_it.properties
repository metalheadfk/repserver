#
# @(#)src/tools/sov/java_it.properties, tool, as142, 20060816 1.16.2.1
# ===========================================================================
# Licensed Materials - Property of IBM
# "Restricted Materials of IBM"
#
# IBM SDK, Java(tm) 2 Technology Edition, v1.4.2
# (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved
# ===========================================================================
# @(#)src/tools/sov/java.properties, tool, asdev 1.17
#

#
# Java launcher messages
full.version=%2 versione completa "%1"

Could.not.create.JVM=Impossibile creare Java virtual machine.

Thread.detach.error=Impossibile scollegare il thread principale.

Option.requires.classpath=%1 richiede la specifica del percorso di classe.

No.longer.supported=Avvertenza: l'opzione %1 non \u00e8 pi\u00f9 supportata.

Blank.-J.option=Errore: l'opzione -J non deve essere seguita da uno spazio.

No.application.home.found=Impossibile stabilire l'inizio dell'applicazione

Error.loading=Errore nel caricamento: %1

JNI.interfaces.not.found=Interfacce JNI non trovate in: %1

No.public.JRE=Non \u00e8 stato trovato un JRE pubblico per il rilascio %1.

JVM.not.found=Java Virtual Machine non trovato: %1

Path.too.long=Percorso troppo lungo: %1

java.error.opening.jar.file=Si \u00e8 verificato un errore Java durante il tentativo di apertura del file jar: %1

jar.file.not.found=File jar non trovato: %1

class.not.found=Classe java non trovata: %1

class.cannot.be.loaded=Impossibile caricare la classe java. %1

No.main.method.in.class=Non esiste alcun metodo principale nella classe: %1

No.manifest.in.jar.file=Il file jar non contiene un manifest: %1

No.main.class.in.manifest=Il file jar non contiene la voce manifest per la classe principale: %1

main.not.public.in.class=Il metodo principale della classe non \u00e8 pubblico: %1

Option.value.invalid=Valore opzione JVM non valido: %1

Invalid.IBM_JAVA_OPTIONS=Opzione non valida in IBM_JAVA_OPTIONS: %1

Invalid.service.option=Opzione non valida in -XService: %1

JVMCI025=Impossibile aprire il file opzioni: %1

JVMCI030=Opzione non valida nel file opzioni: %1

Unrecognized.option=Opzione JVM non valida: %1

Invalid.number.of.threads=Numero di thread non valido: %1

#
# Main syntax help
#
usage=\n\
Sintassi: %1 [-opzioni] class [args...]\n\
\           (per eseguire una classe)\n\
\   oppure  %1 [-jar] [-options] jarfile [args...]\n\
\           (per eseguire un file jar)\n\
\n\
le opzioni sono:\n\
\    -cp -classpath <directory e file zip/jar separati da %2>\n\
\              imposta un percorso di ricerca per le classi di applicazione e le risorse\n\
\    -D<name>=<value>\n\
\              imposta una propriet\u00e0 di sistema\n\
\    -verbose[:class|gc|jni]\n\
\              abilita l'output dettagliato\n\
\    -version  stampa la versione del prodotto\n\
\    -showversion  stampa la versione del prodotto e continua\n\
\    -? -help  stampa questo messaggio della guida\n\
\    -X        stampa la guida per le opzioni non standard\n\
\    -assert   stampa la guida sulle opzioni di asserzione\n

#
# Additional syntax help for the assert related options
#
assert.usage=\n\
Le opzioni di asserzione possono essere specificate con il comando %1:\n\
\    -ea[:<nomepacchetto>...|:<nomeclasse>]\n\
\    -enableassertions[:<nomepacchetto>...|:<nomeclasse>]\n\
\              abilita asserzioni\n\
\    -da[:<nomepacchetto>...|:<nomeclasse>]\n\
\    -disableassertions[:<nomepacchetto>...|:<nomeclasse>]\n\
\              disabilita asserzioni\n\
\    -esa | -enablesystemassertions\n\
\              abilita asserzioni di sistema\n\
\    -dsa | -disablesystemassertions\n\
\              disabilita asserzioni di sistema

#
# Additional syntax help for nonstandard JVM options
# ibm@73588 added -Xpd
#
classic.xusage= \    -Xargencoding     Consente la sequenza di uscita Unicode negli argomenti\n\
\    -Xbootclasspath:<directory e file zip/jar separati da %2>\n\
\                      Imposta percorso di ricerca per classi bootstrap e risorse\n\
\    -Xbootclasspath/a:<directory e file zip/jar separati da %2>\n\
\                      Accoda alla fine del percorso di classe bootstrap\n\
\    -Xbootclasspath/p:<directory e file zip/jar separati da %2>\n\
\                      Inserisce all'inizio del percorso di classe bootstrap\n\
\    -Xcheck:jni       Esegue controlli aggiuntivi per le funzioni JNI\n\
\    -Xcheck:nabounds  Esegue controlli aggiuntivi per le operazioni matrice JNI\n\
\    -Xcomp            Compila tutti i metodi al primo utilizzo (solo z/OS)\n\
\    -Xdisableexplicitgc Disabilita GC esplicite\n\
\    -Xdisablejavadump Usa un dump di sistema piuttosto che un dump java o un errore\n\
\    -Xlp              Provare ad allocare Java heap usando pagine grandi\n\
\    -Xgcpolicy[:optthruput]|[:optavgpause]\n\
\                      Controllo comportamento raccolta cestino\n\
\    -Xms<size>        Imposta dimensione iniziale heap Java\n\
\    -Xmx<size>        Imposta dimensione massima heap Java\n\
\    -Xnoclassgc       Disabilita raccolta classe cestino\n\
\    -Xcompactexplicitgc   Esegue compttamente completo in ogni GC forzato (System.gc)\n\
\    -Xnocompactexplicitgc Non esegue compattamento nei GC forzati\n\
\    -Xnosigcatch      Disabilita codice recupero JVM\n\
\    -Xnosigchain      Disabilita concatenamento gestore segnali\n\
\    -Xoptionsfile=<file> File contenente opzioni JVM\n\
\    -Xoss<size>       Imposta dimensione massima stack di Java per qualunque processo\n\
\    -Xquickstart      Migliora il tempo di avvio ritardando la compilazione\n\
\    -Xrs              Riduce l'uso di segnali OS\n\
\    -Xrunhprof[:help]|[:<option>=<valore>, ...]\n\
\                      Esegue heap, cpu, o controllo profiling\n\
\    -Xrunjdwp[:help]|[:<option>=<valore>, ...]\n\
\                      Carica librerie di debug per il debug remoto\n\
\    -Xss<size>        Imposta dimensione massima stack nativo per qualunque processo\n\
\    -Xverify          Abilita controllo selettivo classe di tutti i carichi di classe\n\
\    -Xverify:none     Disabilita controllo selettivo classe\n\
\    -Xverify:remote   Abilita controllo selettivo classe dei carichi di classe in remoto\n\
\    -Xdebug           Abilita debug in remoto\n\
Le opzioni -X sono non-standard e sono soggette a modifiche senza preavviso.\n

#
# Additional syntax help for nonstandard JVM options(debug only)
#
classic.debug.xusage= \    -Xt               Traccia bytecode (solo debug, disabilita JIT)\n\
\    -Xtm              Metodo di traccia (solo debug, disabilita JIT)

#
# Reusable JVM option
#
reusable.xusage= Vi sono ulteriori opzioni per l'utilizzo con Persistent Reusable JVM.\n\
\    -Xinitth          Dimensione iniziale heap transitorio\n\
\    -Xinitsh          Dimensione iniziale heap di sistema\n\
\    -Xinitacsh        Dimensione iniziale heap applicazione condivisibile\n\
\    -Xjvmset          Crea o unisci un insieme JVM (classi condivise)\n\
\    -Xresettable      Esegui JVM iin modo ripristinabile\n\
\n\
Queste opzioni sono documentate nel manuale IBM SC34-6201-01, Capitolo 2:\n\
"Persistent Reusable Java Virtual Machine User's Guide".\n\
Tale manuale pu\u00f2 essere scaricato dal seguente indirizzo:\n\
http://www-1.ibm.com/servers/eserver/zseries/software/java/pdf/prjvm14.pdf\n
#Wed Jun 14 22:40:02 EDT 2006
EXEX013=Internal VM error\: Failed to create Java VM
EXEX014=Run %s -help for usage
EXEX015=VM startup error\: Out of memory
EXEX016=Invalid jxespace parameters.
EXEX017=Error mapping jxe in flash
EXEX018=jxeaddr location 0x%08X outside of range 0x%08X to 0x%08X
EXEX019=Logical mapped addr\=0x%X for physical address at 0x%X and size 0x%X
J9VM030=Invalid UTF8 used in JNI function
J9VM031=Required class %.*s must be in the boot classpath, but was found in the application class path in %.*s
J9VM032=Fatal error\: unable to load %s\: %s
J9VM033=Fatal error\: failed to initialize %s
EXEL000=The following options are non-standard and subject to change without notice.\n
J9VM034=jvmri requires trace engine\: run with -Xtrace flag
EXEL001=\  -Xbootclasspath\:<path>    set bootstrap classpath to <path>
J9VM035=Unable to allocate OutOfMemoryError
EXEL002=\  -Xbootclasspath/p\:<path>  prepend <path> to bootstrap classpath
J9VM036=/ by zero
EXEL003=\  -Xbootclasspath/a\:<path>  append <path> to bootstrap classpath
J9VM037=Failed to allocate monitor
EXEL004=\n  -Xrun<dll>[\:options]      start JVMPI profiling\n
EXEL005=\  -Xint           run interpreted only (equivalent to -Xnojit -Xnoaot)
EXEL006=\  -Xnojit         disable the JIT
EXEL007=\  -Xnoaot         do not run precompiled code
EXEL008=\  -Xfuture        enable strictest checks, anticipating future default
EXEL009=\nArguments to the following options are expressed in bytes.
J9RI000=jvmri->CreateThread cannot allocate thread args memory
J9RI001=Internal error removing dump agent in jvmri->DumpDeregister, func may not be deregistered.
EXEX020=Missing required export
J9RI002=jvmri->DumpRegister called with null callback, func not registered.
EXEX021=Error loading jxe relocator\: %s (%s)
J9RI003=Can't allocate dump agent in jvmri->DumpRegister, func not registered.
EXEX022=Unable to load rom image from jxe.
J9RI004=jvmri->DynamicVerbosegc not supported.
J9RI005=jvmri->GetComponentDataArea component %s does not have dataArea under this vm.
J9RI006=jvmri->GetRasInfo called with null RasInfo structure.
JDBG000=-Xrunjdwp usage\: -Xrunjdwp\:[help]|[<option>\=<value>, ...]\n
J9RI007=jvmri->GetRasInfo unable to alloc memory.
JDBG001=Option Name and Value           Description                     Default
J9RI008=jvmri->GetRasInfo unable to get components.
JDBG002=---------------------           -----------                     -------
J9RI009=jvmri->GetRasInfo unable to alloc memory.
JDBG003=suspend\=y|n                     wait on startup?                y
JDBG004=transport\=<name>                transport spec                  none
JDBG005=address\=<listen/attach address> transport spec                  "localhost\:8888"
JDBG006=server\=y|n                      listen for debugger?            n
JDBG007=onthrow\=<exception name>        debug on throw                  none
JDBG008=onuncaught\=y|n                  debug on any uncaught?          n
JDBG009=j9methodids\=y|n                 use j9 method ids               n\n
EXEL010=Values suffixed with "k" (kilo) or "m" (mega) will be factored accordingly.\n
EXEL011=\  -Xmca<x>        set RAM class segment increment to <x>
EXEL012=\  -Xmco<x>        set ROM class segment increment to <x>
EXEL013=\  -Xmn<x>         set new space size to <x>
EXEL014=\  -Xmn<x>         set initial/maximum new space size to <x>
EXEL015=\  -Xmns<x>        set initial new space size to <x>
EXEL016=\  -Xmnx<x>        set maximum new space size to <x>
EXEL017=\  -Xmo<x>         set old space size to <x>
EXEL018=\  -Xmo<x>         set initial/maximum old space size to <x>
EXEL019=\  -Xmos<x>        set initial old space size to <x>
J9CL000=Incompatible class library
J9RI010=jvmri->GetRasInfo unable to alloc memory.
J9CL001=Try running with -jcl\:%s
J9RI011=RasInfo structure has unsupported type field.
J9CL002=Classes are from a non-J9 library, or an incorrectly reduced JXE
J9RI012=jvmri->ReleaseRasInfo called with null RasInfo structure.
J9CL003=Incompatible class library version\: JCL %x, VM %x
J9RI013=jvmri->ReleaseRasInfo\: structure has unsupported type field.
J9CL004=Incompatible class library version\: expected JCL v%i, found v%i
J9RI014=jvmri->RunDumpRoutine\: unable to retrieve component data.
J9CL005=Incompatible class library version\: requires VM v%i, found v%i
J9RI015=jvmri->RunDumpRoutine\: componentId is out of bounds.
J9CL006=No pre-verify data for java/lang/Object
J9RI016=jvmri->SetOutOfMemoryHook called with null callback, func not registered.
J9CL007=timeout value is negative
JDBG010=Example\: java -Xrunjdwp\:transport\=dt_socket,address\=localhost\:8000\n
J9RI017=Can't allocate dump agent in jvmri->SetOutOfMemoryHook, func not registered.
J9CL008=nanosecond timeout value out of range
JDBG011=cannot allocate debugServer
J9RI018=jvmri->NotifySignal raising signal %d.
J9CL009=Thread already started
JDBG012=j9dbg_init_server failed
J9RI019=jvmri->InjectOutOfMemory not supported.
JDBG013=cannot allocate vm->debuggerReferences pool
JDBG014=cannot allocate vm->debuggerClassReferences pool
JDBG015=Debug response server
JDBG016=jvm attach failed
JDBG017=ignoring unrecognized debug option\: '%s'
JDBG018=ignoring unrecognized debug option
JDBG019=unsorted relocation list %zx
EXEL020=\  -Xmox<x>        set maximum old space size to <x>
EXEL021=\  -Xmoi<x>        set old space increment to <x>
EXEL022=\  -Xms<x>         set old space size to <x>
EXEL023=\  -Xms<x>         set initial memory size to <x>
EXEL024=\  -Xmx<x>         set memory maximum to <x>
EXEL025=\  -Xmr<x>         set remembered set size to <x>
EXEL026=\  -Xmrx<x>        set maximum size of remembered set to <x>
EXEL027=\  -Xmso<x>        set OS thread stack size to <x>
EXEL028=\  -Xiss<x>        set initial java thread stack size to <x>
EXEL029=\  -Xss<x>         set maximum java thread stack size to <x>
J9CL010=Failed to allocate JNIEnv
J9RI020=jvmri->CreateThread unable to allocate private monitor
J9CL011=Failed to fork OS thread
J9CL012=Failed to allocate TLS
JDBG020=unrecognized debug option\: '%s'
JDBG021=unrecognized debug option
J9GC000=Internal Error, Out of Memory
J9GC001=Failed to instantiate heap
J9GC002=Failed to instantiate heap.  %zu%s requested
J9GC003=Failed to instantiate task dispatcher
VERB000=Verbose stack\: "%.*s" used %zd/%zd bytes on Java/C stacks
J9GC004=Failed to instantiate global garbage collector
VERB001=(unnamed thread)
J9GC005=Failed to initialize
EXEL030=\  -Xss<x>         set thread stack size to <x>
VERB002=Verbose stack\: maximum stack use was %zd/%zd bytes on Java/C stacks
J9GC006=Failed to initialize, out of memory
EXEL031=\  -Xmine<x>       set minimum size for heap expansion to <x>
VERB003=Error\: -Xverbosegclog number of files must be greater than 0
J9GC007=Failed to initialize, parsing command line
EXEL032=\  -Xmaxe<x>       set maximum size for heap expansion to <x>
VERB004=Error\: -Xverbosegclog number of cycles must be greater than 0
J9GC008=Failed to initialize module extensions
EXEL033=\nArguments to the following options are expressed as a decimal from 0 to 1.
VERB005=Error\: -Xverbosegclog missing filename
J9GC009=Failed to initialize mutex for GC statistics
EXEL034=A value of 0.3 represents a request of 30%%\n
VERB006=Failed to initialize
EXEL035=\  -Xminf<x>       minimum percentage of heap free after GC
EXEL036=\  -Xmaxf<x>       maximum percentage of heap free after GC
EXEL037=\nArguments to the following options are expressed a decimal numbers.\n
EXEL038=\  -Xgcthreads<x>                set number of GC threads
EXEL039=\  -Xnoclassgc                   disable dynamic class unloading
J9GC010=Failed to initialize finalizer management
J9GC011=Failed to initialize pool of memoryspaces
J9GC012=Failed to allocate VM memory segments
J9GC013=Failed to allocate VM object memory segments
J9GC014=Failed to allocate VM class memory segments
J9GC015=Failed to allocate default memory space
EXEL040=\  -Xclassgc                     enable dynamic class unloading
J9GC016=Failed to allocate survivor segment in default memory space
EXEL041=\  -Xalwaysclassgc               enable dynamic class unloading on every GC
J9GC017=%s too small, must be at least %zu %sbytes
EXEL042=\  -Xnocompactexplicitgc         disable compaction on a system GC
J9GC018=%s too small for %s
EXEL043=\  -Xcompactexplicitgc           enable compaction on every system GC
JVMP000=Attempt to instrument %.*s through JVMPI was disallowed
J9GC019=%s too large for %s
EXEL044=\  -Xcompactgc                   enable compaction
EXEL045=\  -Xnocompactgc                 disable compaction
EXEL046=\  -Xlp                          enable large page support
EXEL047=\n  -Xdbg\:<options>               enable debug, JDWP standard options
EXEL048=\  -Xrunjdwp\:<options>           enable debug, JDWP standard options
EXEL049=\  -Xdbginfo\:<symbol file path>  enable debug info server
J9GC020=%s too large for heap
J9GC021=%s must equal %s
J9GC022=Sum of %s and %s too large for %s
J9GC023=Sum of %s and %s must equal %s
J9GC024=Sum of %s and %s too large for heap
J9GC025=Sum of %s and %s
EXEL050=\  -Xrdbginfo\:<host>\:<port>      enable remote debug info server
J9GC026=-Xverbosegclog failed to allocate internal structures
EXEL051=\nWARNING\: The command line argument "%s" has been deprecated.\nWARNING\: Use "-classpath <path>" or "-cp <path>".
J9GC027=Malformed option\: '%s'
EXEL052=\nWARNING\: The command line argument "%s" has been deprecated.\nWARNING\: Use the -X equivalent.
J9GC028=Option too large\: '%s'
EXEL053=Licensed Materials - Property of IBM\n\nJ9 - VM for the Java(TM) platform, Version %s
J9GC029=Option error\: '%s'
EXEL054=(c) Copyright IBM Corp. 1991, 2004  All Rights Reserved
EXEL055=Target\: %s\n
EXEL056=IBM is a registered trademark of IBM Corp.\nJava and all Java-based marks and logos are trademarks or registered\ntrademarks of Sun Microsystems, Inc.\n
EXEL057=java version "1.3.0"\n
EXEL058=Internal VM error\: Out of memory
EXEL059=Internal VM error\: Failed to find class java/lang/String
J9GC030=%s value of %f must be at least %s less than %s value of %f
EXEL060=Internal VM error\: Failed to create byte array for class name %s
EXEL061=Internal VM error\: Failed to create java/lang/String for class name %s
EXEL062=Internal VM error\: Out of memory converting string to UTF Chars for class name %s
EXEL063=Class %s does not implement main()
EXEL064=The method main must be declared public, static and void.
EXEL065=Internal VM error\: Failed to create argument array
EXEL066=Internal VM error\: Failed to create byte array for argument %s
EXEL067=Internal VM error\: Failed to create java/lang/String for argument %s
EXEL068=Internal VM error\: Failed to set array element for %s
CDRT000=Unable to locate JIT stack map - aborting VM
EXEL069=Failed to find ROM image
CDRT001=Method\: %.*s.%.*s%.*s (%p)
CDRT002=Failing PC\: %p (offset %p), metaData \= %p
DUMP000=Dump Option unrecognised\: -Xdump\:%s
DUMP001=Dump Event unrecognised\: ...%s
DUMP002=Label Field unrecognised\: %%%c
DUMP003=Named Dump unrecognised\: %s
DUMP004=Missing Filename
DUMP005=Missing Executable
DUMP006=Processing Dump Event "%s", detail "%.*s" - Please Wait.
DUMP007=JVM Requesting %s Dump using '%s'
DUMP008=using '%s'
DUMP009=%s Dump not available
EXEL070=ROM image is wrong version
EXEL071=Failed to find main class name
EXEL072=VM startup error\: Out of memory
EXEL073=Internal VM error\: Failed to create Java VM
EXEL074=Unable to redirect console I/O to\: %s\:%d
EXEL075=\  -Xquickstart    improve startup time by delaying optimizations
DUMP010=%s Dump written to %s
DUMP011=%s Dump spawned process %d
DUMP012=Error in %s Dump\: %s
DUMP013=Processed Dump Event "%s", detail "%.*s".
DUMP014=VM Action unrecognised\: ...%s
J9VM000=Malformed value for IBM_JAVA_OPTIONS
J9VM001=Malformed value for -Xservice
J9VM002=Options file not found
J9VM003=JIT compiler "%s" not found. Will use interpreter.
J9VM004=Cannot load library required by\: %s
J9VM005=Invalid value for environment variable\: %s
J9VM006=Invalid command-line option\: %s
J9VM007=Command-line option unrecognised\: %s
J9VM008=J9VMDllMain not found
J9VM009=J9VMDllMain failed
J9VM010=Failed to initialize %s
J9VM011=Unable to load %s\: %s
J9VM012=Unable to unload %s\: %s
J9VM013=Initialization error in function %s(%d)\: %s
J9VM014=Shutdown error in function %s(%d)\: %s
J9VM015=Initialization error for library %s(%d)\: %s
ZIPS000=Unable to open %s (%s)
J9VM016=Shutdown error for library %s(%d)\: %s
ZIPS001=Unable to open %s (Missing export)
J9VM017=Could not allocate memory for command line option array
J9VM018=Could not allocate memory for DLL load table pool
J9VM019=Fatal error\: Unable to find and initialize required class %.*s
EXEX000=Usage\:\t%s [options] classname [args...]
EXEX001=Usage\:\t%s [options] -jxe\:<jxeFile> [args...]
EXEX002=\n[options]\n  -classpath <path>\n  -cp <path>       set classpath to <path>.
EXEX003=\  -jxe\:<jxeFile>   run the named jxe file.
EXEX004=\  -jxespace\:<physicalAddr>,<size>,<logicalAddr>\n                   map memory region for jxes, (values are in hex).\n  -jxeaddr\:<logicalAddr>\n                   run a jxe directly from memory, (address is in hex).
EXEX005=\  -D<prop>\=<val>   set the value of a system property.\n
EXEX006=\  -debug\:<options> enable debug, JDWP standard <options>.\n
EXEX007=\  -jcl\:<config>[\:options]\n                   specify which JCL DLL to use (e.g. cdc, cldc, ...).\n
EXEX008=\  -verbose[\:class,gc,stack,sizes]\n                   enable verbose output (default\=class).\n
JDTS000=Listening for transport dt_socket at address\: %d
EXEX009=\  -verify          enable class file verification.\n  -X               print help on non-standard options.
J9VM020=Searched in %.*s
J9VM021=Out of memory for interpreter stack map - aborting VM
J9VM022=Stack map failed, result \= %p - aborting VM
J9VM023=This may indicate that JAVA_HOME is incorrect, or that class libraries are not installed
J9VM024=Exception in thread "%.*s" 
J9VM025=\tat %.*s.%.*s (Native Method)
J9VM026=\tat %.*s.%.*s (Unknown Source)
J9VM027=\tat %.*s.%.*s (%.*s)
J9VM028=\tat %.*s.%.*s (%.*s\:%u)
J9VM029=\tat (Unknown Method)
EXEX010=%s requires a parameter
EXEX011=Error loading jxe\: %s
EXEX012=-jar option is not available for this class library
